datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://routeops:routeops12345@cluster0.e3gp8ui.mongodb.net/routeops-dev?retryWrites=true&w=majority&appName=Cluster0"
}

generator client {
  provider = "prisma-client-js"
}

model CityHall {
  createdAt   DateTime          @default(now())
  description String?
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  projects    Project[]
  updatedAt   DateTime          @updatedAt
  users       User[]
}

model RoutePoint {
  createdAt   DateTime @default(now())
  frameNumber Int?
  hazards     Hazard[]
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  latitude    Float?
  longitude   Float?
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?  @db.ObjectId
  timestamp   Int?
  updatedAt   DateTime @updatedAt
}

model Project {
  assignedUser String?
  cityHall     CityHall?          @relation(fields: [cityHallId], references: [id])
  cityHallId   String?            @db.ObjectId
  createdAt    DateTime           @default(now())
  createdBy    String?
  description  String?
  hazards      Hazard[]
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  routePoints  RoutePoint[]
  status       EnumProjectStatus?
  surveys      Survey[]
  updatedAt    DateTime           @updatedAt
  videoUrl     String?
}

model Remark {
  createdAt DateTime  @default(now())
  hazard    Hazard?   @relation(fields: [hazardId], references: [id])
  hazardId  String?   @db.ObjectId
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  survey    Survey?   @relation(fields: [surveyId], references: [id])
  surveyId  String?   @db.ObjectId
  text      String?
  timestamp DateTime?
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
}

model Hazard {
  createdAt    DateTime    @default(now())
  createdBy    String?
  description  String?
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl     String?
  latitude     Float?
  longitude    Float?
  project      Project?    @relation(fields: [projectId], references: [id])
  projectId    String?     @db.ObjectId
  remarks      Remark[]
  routePoint   RoutePoint? @relation(fields: [routePointId], references: [id])
  routePointId String?     @db.ObjectId
  severity     String?
  typeField    String?
  updatedAt    DateTime    @updatedAt
}

model Survey {
  assignedUser String?
  createdAt    DateTime  @default(now())
  endTime      DateTime?
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  project      Project?  @relation(fields: [projectId], references: [id])
  projectId    String?   @db.ObjectId
  remarks      Remark[]
  remarksText  String?
  startTime    DateTime?
  status       String?
  updatedAt    DateTime  @updatedAt
}

model User {
  cityHall   CityHall?     @relation(fields: [cityHallId], references: [id])
  cityHallId String?       @db.ObjectId
  createdAt  DateTime      @default(now())
  email      String?       @unique
  firstName  String?
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  isActive   Boolean?
  lastName   String?
  password   String
  remarks    Remark[]
  role       EnumUserRole?
  roles      Json
  updatedAt  DateTime      @updatedAt
  username   String        @unique
}


enum EnumProjectStatus {
  active
  inactive
  completed
  pending
}

enum EnumUserRole {
  admin
  dashboard_user
  app_user
}
