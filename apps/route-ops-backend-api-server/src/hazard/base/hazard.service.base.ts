/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Hazard as PrismaHazard,
  Project as PrismaProject,
  RoutePoint as PrismaRoutePoint,
} from "@prisma/client";

export class HazardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HazardCountArgs, "select">): Promise<number> {
    return this.prisma.hazard.count(args);
  }

  async hazards(args: Prisma.HazardFindManyArgs): Promise<PrismaHazard[]> {
    return this.prisma.hazard.findMany(args);
  }
  async hazard(
    args: Prisma.HazardFindUniqueArgs
  ): Promise<PrismaHazard | null> {
    return this.prisma.hazard.findUnique(args);
  }
  async createHazard(args: Prisma.HazardCreateArgs): Promise<PrismaHazard> {
    return this.prisma.hazard.create(args);
  }
  async updateHazard(args: Prisma.HazardUpdateArgs): Promise<PrismaHazard> {
    return this.prisma.hazard.update(args);
  }
  async deleteHazard(args: Prisma.HazardDeleteArgs): Promise<PrismaHazard> {
    return this.prisma.hazard.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.hazard
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }

  async getRoutePoint(parentId: string): Promise<PrismaRoutePoint | null> {
    return this.prisma.hazard
      .findUnique({
        where: { id: parentId },
      })
      .routePoint();
  }
}
