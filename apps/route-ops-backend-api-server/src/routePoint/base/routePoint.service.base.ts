/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RoutePoint as PrismaRoutePoint,
  Hazard as PrismaHazard,
  Project as PrismaProject,
} from "@prisma/client";

export class RoutePointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RoutePointCountArgs, "select">
  ): Promise<number> {
    return this.prisma.routePoint.count(args);
  }

  async routePoints(
    args: Prisma.RoutePointFindManyArgs
  ): Promise<PrismaRoutePoint[]> {
    return this.prisma.routePoint.findMany(args);
  }
  async routePoint(
    args: Prisma.RoutePointFindUniqueArgs
  ): Promise<PrismaRoutePoint | null> {
    return this.prisma.routePoint.findUnique(args);
  }
  async createRoutePoint(
    args: Prisma.RoutePointCreateArgs
  ): Promise<PrismaRoutePoint> {
    return this.prisma.routePoint.create(args);
  }
  async updateRoutePoint(
    args: Prisma.RoutePointUpdateArgs
  ): Promise<PrismaRoutePoint> {
    return this.prisma.routePoint.update(args);
  }
  async deleteRoutePoint(
    args: Prisma.RoutePointDeleteArgs
  ): Promise<PrismaRoutePoint> {
    return this.prisma.routePoint.delete(args);
  }

  async findHazards(
    parentId: string,
    args: Prisma.HazardFindManyArgs
  ): Promise<PrismaHazard[]> {
    return this.prisma.routePoint
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .hazards(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.routePoint
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
