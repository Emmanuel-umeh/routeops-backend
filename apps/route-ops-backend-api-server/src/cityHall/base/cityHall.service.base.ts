/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CityHall as PrismaCityHall,
  Project as PrismaProject,
  User as PrismaUser,
} from "@prisma/client";

export class CityHallServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CityHallCountArgs, "select">): Promise<number> {
    return this.prisma.cityHall.count(args);
  }

  async cityHalls(
    args: Prisma.CityHallFindManyArgs
  ): Promise<PrismaCityHall[]> {
    return this.prisma.cityHall.findMany(args);
  }
  async cityHall(
    args: Prisma.CityHallFindUniqueArgs
  ): Promise<PrismaCityHall | null> {
    return this.prisma.cityHall.findUnique(args);
  }
  async createCityHall(
    args: Prisma.CityHallCreateArgs
  ): Promise<PrismaCityHall> {
    return this.prisma.cityHall.create(args);
  }
  async updateCityHall(
    args: Prisma.CityHallUpdateArgs
  ): Promise<PrismaCityHall> {
    return this.prisma.cityHall.update(args);
  }
  async deleteCityHall(
    args: Prisma.CityHallDeleteArgs
  ): Promise<PrismaCityHall> {
    return this.prisma.cityHall.delete(args);
  }

  async findProjects(
    parentId: string,
    args: Prisma.ProjectFindManyArgs
  ): Promise<PrismaProject[]> {
    return this.prisma.cityHall
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projects(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.cityHall
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
