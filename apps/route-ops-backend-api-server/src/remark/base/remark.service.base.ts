/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Remark as PrismaRemark,
  User as PrismaUser,
} from "@prisma/client";

export class RemarkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RemarkCountArgs, "select">): Promise<number> {
    return this.prisma.remark.count(args);
  }

  async remarks(args: Prisma.RemarkFindManyArgs): Promise<PrismaRemark[]> {
    return this.prisma.remark.findMany(args);
  }
  async remark(
    args: Prisma.RemarkFindUniqueArgs
  ): Promise<PrismaRemark | null> {
    return this.prisma.remark.findUnique(args);
  }
  async createRemark(args: Prisma.RemarkCreateArgs): Promise<PrismaRemark> {
    return this.prisma.remark.create(args);
  }
  async updateRemark(args: Prisma.RemarkUpdateArgs): Promise<PrismaRemark> {
    return this.prisma.remark.update(args);
  }
  async deleteRemark(args: Prisma.RemarkDeleteArgs): Promise<PrismaRemark> {
    return this.prisma.remark.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.remark
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
