/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  Remark as PrismaRemark,
  CityHall as PrismaCityHall,
} from "@prisma/client";

import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";

export class UserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService
  ) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    const results = await this.prisma.user.findMany(args);
    // Add entity alias to all results
    return results.map(result => {
      if (result.cityHallId && (result as any).cityHall) {
        (result as any).entity = (result as any).cityHall;
      }
      return result;
    });
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    const result = await this.prisma.user.findUnique(args);
    if (result && result.cityHallId && (result as any).cityHall) {
      // Add entity alias
      (result as any).entity = (result as any).cityHall;
    }
    return result;
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findRemarks(
    parentId: string,
    args: Prisma.RemarkFindManyArgs
  ): Promise<PrismaRemark[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .remarks(args);
  }

  async getCityHall(parentId: string): Promise<PrismaCityHall | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .cityHall();
  }
}
