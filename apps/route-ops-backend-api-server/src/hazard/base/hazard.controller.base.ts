/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { HazardService } from "../hazard.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HazardCreateInput } from "./HazardCreateInput";
import { Hazard } from "./Hazard";
import { HazardFindManyArgs } from "./HazardFindManyArgs";
import { HazardWhereUniqueInput } from "./HazardWhereUniqueInput";
import { HazardUpdateInput } from "./HazardUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class HazardControllerBase {
  constructor(
    protected readonly service: HazardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hazard })
  @nestAccessControl.UseRoles({
    resource: "Hazard",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createHazard(@common.Body() data: HazardCreateInput): Promise<Hazard> {
    return await this.service.createHazard({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,

        routePoint: data.routePoint
          ? {
              connect: data.routePoint,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,
        imageUrl: true,
        latitude: true,
        longitude: true,

        project: {
          select: {
            id: true,
          },
        },

        routePoint: {
          select: {
            id: true,
          },
        },

        severity: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Hazard] })
  @ApiNestedQuery(HazardFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Hazard",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async hazards(@common.Req() request: Request): Promise<Hazard[]> {
    const args = plainToClass(HazardFindManyArgs, request.query);
    return this.service.hazards({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,
        imageUrl: true,
        latitude: true,
        longitude: true,

        project: {
          select: {
            id: true,
          },
        },

        routePoint: {
          select: {
            id: true,
          },
        },

        severity: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hazard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hazard",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async hazard(
    @common.Param() params: HazardWhereUniqueInput
  ): Promise<Hazard | null> {
    const result = await this.service.hazard({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        id: true,
        imageUrl: true,
        latitude: true,
        longitude: true,

        project: {
          select: {
            id: true,
          },
        },

        remarks: {
          select: {
            id: true,
            text: true,
            timestamp: true,
            createdAt: true,
            user: {
              select: {
                id: true,
                username: true,
                firstName: true,
                lastName: true,
              },
            },
            survey: {
              select: {
                id: true,
                name: true,
                status: true,
              },
            },
          },
          orderBy: { createdAt: 'desc' },
        },

        routePoint: {
          select: {
            id: true,
          },
        },

        severity: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hazard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hazard",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateHazard(
    @common.Param() params: HazardWhereUniqueInput,
    @common.Body() data: HazardUpdateInput
  ): Promise<Hazard | null> {
    try {
      return await this.service.updateHazard({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,

          routePoint: data.routePoint
            ? {
                connect: data.routePoint,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          createdBy: true,
          description: true,
          id: true,
          imageUrl: true,
          latitude: true,
          longitude: true,

          project: {
            select: {
              id: true,
            },
          },

          routePoint: {
            select: {
              id: true,
            },
          },

          severity: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hazard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hazard",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteHazard(
    @common.Param() params: HazardWhereUniqueInput
  ): Promise<Hazard | null> {
    try {
      return await this.service.deleteHazard({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,
          description: true,
          id: true,
          imageUrl: true,
          latitude: true,
          longitude: true,

          project: {
            select: {
              id: true,
            },
          },

          routePoint: {
            select: {
              id: true,
            },
          },

          severity: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
